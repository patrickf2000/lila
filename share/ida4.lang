<?xml version="1.0" encoding="UTF-8"?>
<language id="ida" name="Ida" version="2.0" _section="Source">
  <metadata>
    <!--<property name="mimetypes">text/x-c;text/x-csrc;image/x-xpixmap</property>-->
    <property name="globs">*.ida;*.ih</property>
    <property name="line-comment-start">#</property>
  </metadata>

  <styles>
    <style id="comment"           name="Comment"               map-to="def:comment"/>
    <style id="string"            name="String"                map-to="def:string"/>
    <style id="preprocessor"      name="Preprocessor"          map-to="def:preprocessor"/>
    <style id="char"              name="Character"             map-to="def:character"/>
    <style id="keyword"           name="Keyword"               map-to="def:keyword"/>
    <style id="operator"          name="Operator"              map-to="def:operator"/>
    <style id="type"              name="Data Type"             map-to="def:type"/>
    <style id="escaped-character" name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           name="Decimal number"        map-to="def:decimal"/>
    <style id="octal"             name="Octal number"          map-to="def:base-n-integer"/>
    <style id="hexadecimal"       name="Hexadecimal number"    map-to="def:base-n-integer"/>
    <style id="boolean"           name="Boolean value"         map-to="def:boolean"/>
    <style id="error"             name="Error"                 map-to="def:error"/>
  </styles>

  <definitions>

    <!--regexs-->
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <!--contexts used on the main context-->

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char" class="string">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-hexadecimal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]*[g-zG-Z][a-zA-Z0-9]*[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="octal" style-ref="octal">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-octal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]*[89][0-9]*[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        (0|[1-9][0-9]*)[uUlL]*
        (?![\w\.])
      </match>
    </context>
    
    <context id="preprocessor" style-ref="preprocessor">
        <keyword>module</keyword>
		<keyword>use</keyword>
    </context>

    <context id="keywords" style-ref="keyword">
        <keyword>func</keyword>
		<keyword>extern</keyword>
		<keyword>begin</keyword>
		<keyword>end</keyword>
		<keyword>return</keyword>
		<keyword>if</keyword>
		<keyword>elif</keyword>
		<keyword>else</keyword>
		<keyword>while</keyword>
		<keyword>for</keyword>
		<keyword>in</keyword>
		<keyword>break</keyword>
		<keyword>continue</keyword>
		<keyword>syscall</keyword>
		<keyword>exit</keyword>
    </context>

    <context id="operators" style-ref="operator">
      <keyword>sizeof</keyword>
    </context>

    <context id="types" style-ref="type">
        <keyword>byte</keyword>
	    <keyword>ubyte</keyword>
	    <keyword>short</keyword>
	    <keyword>ushort</keyword>
	    <keyword>int</keyword>
	    <keyword>uint</keyword>
	    <keyword>int64</keyword>
	    <keyword>uint64</keyword>
	    <keyword>float</keyword>
	    <keyword>double</keyword>
	    <keyword>char</keyword>
	    <keyword>str</keyword>
	    
	    <keyword>const</keyword>
    </context>

    <!-- Boolean values -->
    <!-- 12/31: These aren't supported just yet, but they are planned. -->
    <context id="boolean" style-ref="boolean">
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <!--Main context-->
    <context id="ida" class="no-spell-check">
      <include>
        <context ref="gtk-doc:inline-docs-section"/>
        <context ref="def:shell-like-comment"/>
        <context ref="preprocessor"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="invalid-hexadecimal"/>
        <context ref="octal"/>
        <context ref="invalid-octal"/>
        <context ref="decimal"/>
        <context ref="keywords"/>
        <context ref="operators"/>
        <context ref="types"/>
        <context ref="boolean"/>
      </include>
    </context>

  </definitions>
</language>
